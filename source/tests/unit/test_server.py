import asyncio
import unittest
from random import random
from time import sleep

import numpy as np
import matplotlib.pyplot as plt
import aiohttp
import requests
from pathlib import Path

from server import *

################################################################
# IMPORTANT test server needs filled database by simple static data
# otherwise no test passes
# run testInsertData first and than test server
################################################################

class TestServer(unittest.TestCase):
	def test_get_id_trip_by_trip_id(self):
		server = Server('vehicle_positions_test_database')

		# needs database
		self.assertEqual(1, server.get_id_trip_by_trip_id('467_252_200105'))

		server.database_connection = None

		# should use catch map
		self.assertEqual(1, server.get_id_trip_by_trip_id('467_252_200105'))

	def test_prepare_geojson_tail(self):
		server = Server()

		tail_sample = server.prepare_geojson_tail()

		self.assertIsInstance(tail_sample, dict)
		self.assertDictEqual({'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'properties': {}, 'geometry': {'type': 'LineString', 'coordinates': []}}]},
							 tail_sample)

	def test_get_tail(self):
		server = Server('vehicle_positions_test_database')

		tail = server.get_tail('381_49_191201', datetime(2020, 2, 23, 21, 59, 28))

		self.assertIsInstance(tail, dict)
		self.assertEqual({'type': 'FeatureCollection', 'features': [{'type': 'Feature', 'properties': {}, 'geometry': {'type': 'LineString', 'coordinates': [
				[14.56198, 50.03388], [14.55963, 50.03324], [14.55935, 50.03317], [14.55421, 50.03184], [14.55321, 50.03154], [14.55116, 50.03125], [14.55028, 50.03127], [14.54927, 50.03145], [14.54787, 50.03188], [14.54485, 50.03313], [14.54385, 50.03337], [14.54228, 50.03336], [14.54149, 50.03333],
				[14.54002, 50.03337], [14.53917, 50.03352], [14.53788, 50.03383], [14.5377, 50.03389], [14.53768, 50.034], [14.5375, 50.03405], [14.53736, 50.03398], [14.53736, 50.03388], [14.53731, 50.0338], [14.53721, 50.03366], [14.53631, 50.03334], [14.53578, 50.0331], [14.53532, 50.03284], [14.53376, 50.03177],
				[14.53342, 50.03154], [14.53319, 50.03142], [14.53278, 50.03123], [14.53216, 50.03109], [14.52845, 50.03067], [14.52803, 50.0306], [14.52721, 50.03048]]}}]},
			tail)

	def test_get_shape(self):
		server = Server('vehicle_positions_test_database')

		from_server = server.get_shape('381_49_191201')
		from_file_system = json.loads(File_system.get_file_content(File_system.all_shapes / Path('381_49_191201').with_suffix('.shape')))

		self.assertIsInstance(from_server, dict)
		self.assertListEqual(from_file_system['features'][0]['geometry']['coordinates'], from_server['features'][0]['geometry']['coordinates'])

	def test_get_stops(self):
		server = Server('vehicle_positions_test_database')

		stops = server.get_stops('467_252_200105')

		self.assertIsInstance(stops, dict)
		self.assertEqual(31, len(stops['features']))
		self.assertEqual('Roudnice n.L.,Purkyňovo nám.', stops['features'][0]['name'])

	def test_get_trips_by_stop(self):
		server = Server('vehicle_positions_test_database')

		trips = server.get_trips_by_stop('Kladno,Nám.Svobody', datetime(2020, 2, 23, 22, 9, 35))

		self.assertIsInstance(trips, list)
		self.assertEqual(3, len(trips))
		self.assertEqual('324_634_200111', trips[0]['id'])

	## you must start the server in background first
	## and it is recommended to run demo database fill
	## for all the following test
	def test_high_load_sync(self):
		req_start = time.time()
		for i in range(100):
			x = requests.get('http://localhost:8080/vehicles_positions&preventCache=' + str(random()))
			if x.status_code != 200:
				print('req ' + str(i) + ' failed')

		self.assertLess(time.time() - req_start, 1)

	@staticmethod
	async def async_download(urls):
		async with aiohttp.ClientSession() as session:
			for url in urls:
				async with session.get(url) as resp:
					if resp.status != 200:
						print('req ' + url + ' failed')
					if resp.status == 200:
						await resp.read()

	def test_high_load_vehicle_positions(self):
		req_start = time.time()
		asyncio.run(TestServer.async_download(['http://localhost:8080/vehicles_positions&preventCache=' + str(i) for i in range(100)]))

		self.assertLess(time.time() - req_start, 1)

	def test_high_load_trips(self):
		req_start = time.time()
		x = requests.get('http://localhost:8080/vehicles_positions&preventCache=' + str(random()))
		content = json.loads(x.content)
		asyncio.run(TestServer.async_download(['http://localhost:8080/trip.' + trip['properties']['gtfs_trip_id'] + '&preventCache=' + trip['properties']['gtfs_trip_id'] for trip in content['features']]))

		self.assertLess(time.time() - req_start, 1)
		self.assertGreater(len(content['features']), 100)

	def test_high_load_tails(self):
		req_start = time.time()
		x = requests.get('http://localhost:8080/vehicles_positions&preventCache=' + str(random()))
		content = json.loads(x.content)
		asyncio.run(TestServer.async_download(['http://localhost:8080/tail.' + trip['properties']['gtfs_trip_id'] + '&preventCache=' + trip['properties']['gtfs_trip_id'] for trip in content['features']]))

		self.assertLess(time.time() - req_start, 1)
		self.assertGreater(len(content['features']), 100)

	def test_high_load_plot(self):
		times = [] #[0.25046277046203613, 0.2804560661315918, 0.33176708221435547, 0.3212568759918213, 0.43640899658203125, 0.2785012722015381, 0.4136950969696045, 0.40041589736938477, 0.4038889408111572, 0.3444480895996094, 0.36331796646118164, 0.3171861171722412, 0.3433840274810791, 0.3163599967956543, 0.24074196815490723, 0.2656440734863281, 0.3214452266693115, 0.26805615425109863, 0.24568796157836914, 0.3207261562347412, 0.3076748847961426, 0.27668213844299316, 0.2597370147705078, 0.27500128746032715, 0.3445861339569092, 0.3401007652282715, 0.27402496337890625, 0.26123714447021484, 0.2559680938720703, 0.26142191886901855, 0.26688218116760254, 0.26560401916503906, 0.26649999618530273, 0.26143383979797363, 0.2630741596221924, 0.25382494926452637, 0.2525978088378906, 0.26003479957580566, 0.2578849792480469, 0.2515881061553955, 0.25844812393188477, 0.25649476051330566, 0.25406479835510254, 0.28153395652770996, 0.2596280574798584, 0.26450586318969727, 0.2562429904937744, 0.3133809566497803, 0.33176708221435547, 0.3287811279296875, 0.3084261417388916, 0.36667585372924805, 0.29089999198913574, 0.3007349967956543, 0.2646031379699707, 0.2592010498046875, 0.27106785774230957, 0.26885509490966797, 0.2641422748565674, 0.2651658058166504, 0.2873101234436035, 0.3512399196624756, 0.34171104431152344, 0.3339650630950928, 0.3387119770050049, 0.2823166847229004, 0.2579071521759033, 0.25325489044189453, 0.2605597972869873, 0.2590920925140381, 0.2909209728240967, 0.27696824073791504, 0.26546502113342285, 0.245330810546875, 0.27608418464660645, 0.2904188632965088, 0.2612769603729248, 0.2660970687866211, 0.264937162399292, 0.2446908950805664, 0.24729180335998535, 0.26717209815979004, 0.2542228698730469, 0.25427699089050293, 0.2634549140930176, 0.2521069049835205, 0.27152585983276367, 0.4258699417114258, 0.34024500846862793, 0.3931398391723633, 0.2457749843597412, 0.2574350833892822, 0.3535318374633789, 0.25318384170532227, 0.25466012954711914, 0.35701823234558105, 0.25910091400146484, 0.2714560031890869, 0.3486158847808838, 0.25745725631713867, 0.2545430660247803, 0.34386301040649414, 0.24666690826416016, 0.25397515296936035, 0.2732062339782715, 0.25011706352233887, 0.2638258934020996, 0.2972300052642822, 0.2938060760498047, 0.40041327476501465, 0.2644839286804199, 0.3681211471557617, 0.4147472381591797, 0.27065610885620117, 0.27420806884765625, 0.272705078125, 0.268359899520874, 0.27010202407836914, 0.341310977935791, 0.26317811012268066, 0.25716185569763184, 0.304027795791626, 0.22197318077087402, 0.24428391456604004, 0.403688907623291, 0.2840921878814697, 0.42127203941345215, 0.29590511322021484, 0.29770922660827637, 0.4121057987213135, 0.2293870449066162, 0.2679102420806885, 0.36899399757385254, 0.2846980094909668, 0.3603992462158203, 0.3561270236968994, 0.29550886154174805, 0.4598419666290283, 0.3910970687866211, 0.47793102264404297, 0.2585442066192627, 0.25090622901916504, 0.3580811023712158, 0.28110384941101074, 0.41188931465148926, 0.24713993072509766, 0.24038195610046387, 0.42514562606811523, 0.2334747314453125, 0.2555220127105713, 0.3476297855377197, 0.26631999015808105, 0.33210301399230957, 0.30124592781066895, 0.28771400451660156, 0.2288823127746582, 0.28371691703796387, 0.2621328830718994, 0.27170610427856445, 0.4159209728240967, 0.3263111114501953, 0.44994568824768066, 0.32595300674438477, 0.472963809967041, 0.2750692367553711, 0.2532808780670166, 0.33455896377563477, 0.2503509521484375, 0.24560213088989258, 0.34084320068359375, 0.2867310047149658, 0.26036596298217773, 0.3652379512786865, 0.23313403129577637, 0.24262499809265137, 0.2665441036224365, 0.2236490249633789, 0.24438095092773438, 0.4098079204559326, 0.37014317512512207, 0.758558988571167, 0.31080007553100586, 0.5999789237976074, 0.349445104598999, 0.49487876892089844, 0.49634504318237305, 0.4717550277709961, 0.33605480194091797, 0.38845276832580566, 0.286038875579834, 0.29639291763305664, 0.3579750061035156, 0.26276612281799316, 0.2553589344024658, 0.32956814765930176, 0.30256009101867676, 0.38897085189819336, 0.26610732078552246, 0.3015007972717285, 0.34096288681030273, 0.23983001708984375, 0.2565302848815918, 0.3731539249420166, 0.26416897773742676, 0.2800898551940918, 0.2800638675689697, 0.2452998161315918, 0.2545921802520752, 0.42951393127441406, 0.3597068786621094, 0.41460204124450684, 0.2428128719329834, 0.28041696548461914, 0.3532540798187256, 0.2956240177154541, 0.3759138584136963, 0.2985379695892334, 0.42847776412963867, 0.5348620414733887, 0.4218590259552002, 0.30556416511535645, 0.2637178897857666, 0.4296388626098633, 0.2926459312438965, 0.3391709327697754, 0.615217924118042, 0.3195178508758545, 0.4136807918548584, 0.29119324684143066, 0.2694683074951172, 0.35498905181884766, 0.261627197265625, 0.46192312240600586, 0.29522204399108887, 0.31738710403442383, 0.4204690456390381, 0.31792569160461426, 0.457200288772583, 0.4184410572052002, 0.39732813835144043, 0.3774139881134033, 0.3294951915740967, 0.36190199851989746, 0.33031606674194336, 0.38370299339294434, 0.2747046947479248, 0.2779109477996826, 0.4055008888244629, 0.24800610542297363, 0.4238002300262451, 0.2910587787628174, 0.27462077140808105, 0.35953712463378906, 0.2883760929107666, 0.270892858505249, 0.3052999973297119, 0.2698819637298584, 0.3586437702178955, 0.2591989040374756, 0.2739219665527344, 0.3638131618499756, 0.26712512969970703, 0.26949286460876465, 0.4228837490081787, 0.22051119804382324, 0.28020310401916504, 0.3222839832305908, 0.22710394859313965, 0.2644188404083252, 0.4574320316314697, 0.42499399185180664, 0.42862892150878906, 0.3268308639526367, 0.37890005111694336, 0.28885698318481445, 0.6303319931030273, 0.3050107955932617, 0.43642377853393555, 0.3275320529937744, 0.2659718990325928, 0.43866586685180664, 0.3198068141937256, 0.2928311824798584, 0.42191386222839355, 0.30344438552856445, 0.45839810371398926, 0.3564138412475586, 0.4462850093841553, 0.29897403717041016, 0.2620077133178711, 0.44913196563720703, 0.2736668586730957, 0.26506805419921875, 0.2684030532836914, 0.2597928047180176, 0.3719198703765869, 0.2657890319824219, 0.26447367668151855, 0.396852970123291, 0.29182887077331543, 0.26583099365234375, 0.3507530689239502, 0.258958101272583, 0.455157995223999, 0.2636117935180664, 0.26198410987854004, 0.3877890110015869, 0.29595494270324707, 0.2595100402832031, 0.34657812118530273, 0.2828638553619385, 0.4323859214782715, 0.2728300094604492, 0.28312182426452637, 0.36275577545166016, 0.29904603958129883, 0.27904796600341797, 0.27627992630004883, 0.26334214210510254, 0.26654887199401855, 0.29761815071105957, 0.27850890159606934, 0.25368213653564453, 0.2688138484954834, 0.2907428741455078, 0.40659284591674805, 0.2567322254180908, 0.2549402713775635, 0.3914520740509033, 0.2582261562347412, 0.25391173362731934, 0.3835899829864502, 0.26137495040893555, 0.2610890865325928, 0.33420419692993164, 0.2598400115966797, 0.2548820972442627, 0.3090388774871826, 0.31220483779907227, 0.39911675453186035, 0.286668062210083, 0.27890586853027344, 0.3863968849182129, 0.23172593116760254, 0.2987649440765381, 0.354067325592041, 0.2442781925201416, 0.21721601486206055, 0.29268908500671387, 0.2649500370025635, 0.28527307510375977, 0.3099939823150635, 0.3063650131225586, 0.41976237297058105, 0.26401281356811523, 0.2687208652496338, 0.3459951877593994, 0.2895677089691162, 0.2607738971710205, 0.32095837593078613, 0.2581138610839844, 0.2501339912414551, 0.29046130180358887, 0.35262513160705566, 0.4187629222869873, 0.3831479549407959, 0.44674110412597656, 0.27422189712524414, 0.3103828430175781, 0.46895289421081543, 0.27989983558654785, 0.3893249034881592, 0.28614091873168945, 0.26478075981140137, 0.401731014251709, 0.26520490646362305, 0.27654290199279785, 0.4259979724884033, 0.277055025100708, 0.3719460964202881, 0.26268815994262695, 0.3007791042327881, 0.4307980537414551, 0.2528691291809082, 0.26352405548095703, 0.36080479621887207, 0.27431392669677734, 0.4091470241546631, 0.27921509742736816, 0.30681490898132324, 0.4253411293029785, 0.28693103790283203, 0.27808380126953125, 0.3051869869232178, 0.26445794105529785, 0.2609868049621582, 0.2866361141204834, 0.2514529228210449, 0.25847291946411133, 0.38877177238464355, 0.3105740547180176, 0.45134687423706055, 0.2897648811340332, 0.36962890625, 0.36175990104675293, 0.2567260265350342, 0.3877980709075928, 0.27863407135009766, 0.25785088539123535, 0.3881380558013916, 0.2527430057525635, 0.26657724380493164, 0.46077680587768555, 0.255018949508667, 0.4314301013946533, 0.26325178146362305, 0.2754688262939453, 0.40619707107543945, 0.2599151134490967, 0.26408982276916504, 0.3796999454498291, 0.25620198249816895, 0.41229677200317383, 0.3126249313354492, 0.27306199073791504, 0.3951890468597412, 0.25553202629089355, 0.26111507415771484, 0.38787364959716797, 0.28775787353515625, 0.3911910057067871, 0.21141672134399414, 0.2573881149291992, 0.4021189212799072, 0.2768666744232178, 0.2768869400024414, 0.43932080268859863, 0.2689979076385498, 0.2696859836578369, 0.3297889232635498, 0.25604796409606934, 0.21886396408081055, 0.3301069736480713, 0.3114013671875, 0.3377978801727295, 0.2666738033294678, 0.2563769817352295, 0.3707702159881592, 0.29413294792175293, 0.2579379081726074, 0.3609049320220947, 0.2631518840789795, 0.2712712287902832, 0.3168971538543701, 0.28839588165283203, 0.36437296867370605, 0.26099205017089844, 0.2901651859283447, 0.37943601608276367, 0.2938990592956543, 0.3105919361114502, 0.3288099765777588, 0.27187013626098633, 0.25624704360961914, 0.25548577308654785, 0.21426105499267578, 0.22166013717651367, 0.37540292739868164, 0.25449395179748535, 0.2546107769012451, 0.3704860210418701, 0.2853128910064697, 0.38218188285827637, 0.3127608299255371, 0.26474809646606445, 0.4162170886993408, 0.252000093460083, 0.2566831111907959, 0.4510939121246338, 0.26194310188293457, 0.4004530906677246, 0.261354923248291, 0.25574803352355957, 0.397763729095459, 0.2647407054901123, 0.2847428321838379, 0.37793397903442383, 0.2593059539794922, 0.44655895233154297, 0.25278687477111816, 0.26488208770751953, 0.36837029457092285, 0.2596859931945801, 0.2630746364593506, 0.3843708038330078, 0.2556290626525879, 0.2512383460998535, 0.45090508460998535, 0.275454044342041, 0.36528611183166504, 0.2591700553894043, 0.2560901641845703, 0.3894777297973633, 0.26503825187683105, 0.261242151260376, 0.38875508308410645, 0.25399017333984375, 0.26753687858581543, 0.308743953704834, 0.31981611251831055, 0.446519136428833, 0.25768208503723145, 0.26440000534057617, 0.40046191215515137, 0.25359630584716797, 0.2571859359741211, 0.38948512077331543, 0.27478766441345215, 0.46877217292785645, 0.32621002197265625, 0.24699997901916504, 0.45378899574279785, 0.2929341793060303, 0.2792820930480957, 0.30556488037109375, 0.2535738945007324, 0.267322301864624, 0.29292893409729004, 0.25760316848754883, 0.25086402893066406, 0.311413049697876, 0.2532970905303955, 0.26784610748291016, 0.32334303855895996, 0.282351016998291, 0.4104011058807373, 0.29283905029296875, 0.32059311866760254, 0.3771169185638428, 0.28182506561279297, 0.24919605255126953, 0.3381340503692627, 0.26498889923095703, 0.25168323516845703, 0.3432888984680176, 0.2615981101989746, 0.2488877773284912, 0.2816472053527832, 0.3027651309967041, 0.42052292823791504, 0.3143138885498047, 0.3385908603668213, 0.4698829650878906, 0.3540949821472168, 0.35027194023132324, 0.22689008712768555, 0.2731661796569824, 0.460360050201416, 0.26192474365234375, 0.3856081962585449, 0.2886197566986084, 0.29132890701293945, 0.377640962600708, 0.26528406143188477, 0.2918519973754883, 0.3593301773071289, 0.2608299255371094, 0.26523423194885254, 0.2946197986602783, 0.35097599029541016, 0.4086930751800537, 0.26552391052246094, 0.2667577266693115, 0.4334259033203125, 0.37717723846435547, 0.3864469528198242, 0.31727099418640137, 0.32453107833862305, 0.41133999824523926, 0.31473803520202637, 0.47946596145629883, 0.313737154006958, 0.31977105140686035, 0.3157999515533447, 0.269819974899292, 0.4352889060974121, 0.2638568878173828, 0.29018282890319824, 0.39452290534973145, 0.2987539768218994, 0.30611610412597656, 0.33122682571411133, 0.2821617126464844, 0.4434239864349365, 0.2608819007873535, 0.3540217876434326, 0.32666015625, 0.29715609550476074, 0.4200139045715332, 0.2538890838623047, 0.2616720199584961, 0.3744008541107178, 0.27881407737731934, 0.26789402961730957, 0.3787271976470947, 0.25775790214538574, 0.2575101852416992, 0.3629269599914551, 0.2601959705352783, 0.25129199028015137, 0.2987699508666992, 0.293870210647583, 0.38453197479248047, 0.2729368209838867, 0.2535538673400879, 0.3794901371002197, 0.27704501152038574, 0.25780606269836426, 0.3604898452758789, 0.24591732025146484, 0.2652587890625, 0.36490511894226074, 0.28520774841308594, 0.41273021697998047, 0.2772068977355957, 0.29189395904541016, 0.37200212478637695, 0.2542908191680908, 0.2835090160369873, 0.35427308082580566, 0.2625598907470703, 0.26192402839660645, 0.2870049476623535, 0.27048182487487793, 0.26117801666259766, 0.2664041519165039, 0.2509279251098633, 0.25927281379699707, 0.31510400772094727, 0.28568387031555176, 0.384091854095459, 0.28315210342407227, 0.2776026725769043, 0.36061716079711914, 0.3051900863647461, 0.2539031505584717, 0.41417908668518066, 0.2631089687347412, 0.39556884765625, 0.25552821159362793, 0.2570607662200928, 0.41539716720581055, 0.28932881355285645, 0.31488800048828125, 0.3480358123779297, 0.25374293327331543, 0.24367380142211914, 0.2832150459289551, 0.2582130432128906, 0.2597928047180176, 0.29062318801879883, 0.28819704055786133, 0.39081382751464844, 0.26166296005249023, 0.28676390647888184, 0.44069600105285645, 0.27724385261535645, 0.2593660354614258, 0.3724629878997803, 0.25488710403442383, 0.2572948932647705, 0.36916303634643555, 0.25268101692199707, 0.38940906524658203, 0.26917195320129395, 0.3006877899169922, 0.3617820739746094, 0.3004899024963379, 0.31171369552612305, 0.30947303771972656, 0.24453091621398926, 0.2740919589996338, 0.29511189460754395, 0.26053619384765625, 0.2657129764556885, 0.3031961917877197, 0.26151227951049805, 0.2566399574279785, 0.28723907470703125, 0.26656007766723633, 0.4224238395690918, 0.2746388912200928, 0.24503183364868164, 0.33661603927612305, 0.25963902473449707, 0.26506900787353516, 0.4089698791503906, 0.26778483390808105, 0.26500892639160156, 0.3932950496673584, 0.27283787727355957, 0.417539119720459, 0.28005313873291016, 0.2557089328765869, 0.38217711448669434, 0.34622812271118164, 0.286099910736084, 0.3178732395172119, 0.26111483573913574, 0.2610318660736084, 0.30482006072998047, 0.26932191848754883, 0.4231889247894287, 0.32680511474609375, 0.2449936866760254, 0.3906087875366211, 0.2844512462615967, 0.26859378814697266, 0.48559093475341797, 0.2776648998260498, 0.36707305908203125, 0.27153515815734863, 0.2553670406341553, 0.3932480812072754, 0.2615010738372803, 0.25576186180114746, 0.413240909576416, 0.2579309940338135, 0.25820422172546387, 0.29607391357421875, 0.2539548873901367, 0.2715420722961426, 0.33673977851867676, 0.2538418769836426, 0.3931858539581299, 0.25840210914611816, 0.26139211654663086, 0.40613603591918945, 0.25614309310913086, 0.25893592834472656, 0.3922920227050781, 0.2554638385772705, 0.26558780670166016, 0.3922770023345947, 0.2465050220489502, 0.42848801612854004, 0.26599788665771484, 0.26642918586730957, 0.39032983779907227, 0.2875666618347168, 0.2520327568054199, 0.39304113388061523, 0.25928211212158203, 0.2597208023071289, 0.33752918243408203, 0.2509937286376953, 0.2542431354522705, 0.3385627269744873, 0.2830960750579834, 0.4311819076538086, 0.25496912002563477, 0.25580883026123047, 0.41902804374694824, 0.2822549343109131, 0.2641441822052002, 0.39498281478881836, 0.25714993476867676, 0.2826120853424072, 0.27666616439819336, 0.2590060234069824, 0.25202012062072754, 0.2969961166381836, 0.32781505584716797, 0.2697782516479492, 0.26604700088500977, 0.26291489601135254, 0.5028672218322754, 0.35903096199035645, 0.26566076278686523, 0.2696220874786377, 0.3824498653411865, 0.26664280891418457, 0.33248090744018555, 0.3168067932128906, 0.2996649742126465, 0.3812747001647949, 0.2579159736633301, 0.282620906829834, 0.39247989654541016, 0.25429511070251465, 0.25699925422668457, 0.39515089988708496, 0.26555705070495605, 0.2514219284057617, 0.30951976776123047, 0.26516222953796387, 0.2650017738342285, 0.34157276153564453, 0.32521510124206543, 0.37314796447753906, 0.3122859001159668, 0.25457000732421875, 0.36621904373168945, 0.2599329948425293, 0.25186705589294434, 0.3673384189605713, 0.2592437267303467, 0.2518310546875, 0.3256869316101074, 0.2544209957122803, 0.431851863861084, 0.24467206001281738, 0.28171396255493164, 0.3973369598388672, 0.25295400619506836, 0.24936699867248535, 0.38434505462646484, 0.2528700828552246, 0.2982823848724365, 0.3272569179534912, 0.24713492393493652, 0.25206899642944336, 0.3218419551849365, 0.29903388023376465, 0.3597447872161865, 0.2572517395019531, 0.26064085960388184, 0.36879706382751465, 0.2563331127166748, 0.2822580337524414, 0.3790459632873535, 0.24877500534057617, 0.25382399559020996, 0.36464715003967285, 0.24930191040039062, 0.24950695037841797, 0.3522810935974121, 0.3263883590698242, 0.39537596702575684, 0.27683091163635254, 0.24759221076965332, 0.3857767581939697, 0.25478601455688477, 0.2568550109863281, 0.3889579772949219, 0.259674072265625, 0.21769285202026367, 0.30384206771850586, 0.24451398849487305, 0.25619006156921387, 0.4114952087402344, 0.3110671043395996, 0.38529491424560547, 0.2626209259033203, 0.2649810314178467, 0.3987159729003906, 0.2548868656158447, 0.25566911697387695, 0.35492992401123047, 0.26908111572265625, 0.2844572067260742, 0.27962684631347656, 0.2582991123199463, 0.2601180076599121, 0.34093785285949707, 0.28194093704223633, 0.34134697914123535, 0.2160189151763916, 0.2307577133178711, 0.37419700622558594, 0.2494797706604004, 0.2771141529083252, 0.3866691589355469, 0.25760912895202637, 0.2722620964050293, 0.4234020709991455, 0.2652311325073242, 0.27461791038513184, 0.414719820022583, 0.28780388832092285, 0.3575870990753174, 0.26886892318725586, 0.26256823539733887, 0.3872029781341553, 0.2527017593383789, 0.2537832260131836, 0.409268856048584, 0.25978589057922363, 0.2524292469024658, 0.2908170223236084, 0.29454898834228516, 0.4156348705291748, 0.2931528091430664, 0.25324392318725586, 0.3842439651489258, 0.26659321784973145, 0.2529919147491455, 0.39432191848754883, 0.25221681594848633, 0.25740861892700195, 0.34593987464904785, 0.2640833854675293, 0.2519569396972656, 0.31630420684814453, 0.30098581314086914, 0.37840914726257324, 0.25411486625671387, 0.25383806228637695, 0.38691115379333496, 0.2524750232696533, 0.26146817207336426, 0.41196584701538086, 0.2829577922821045, 0.26543378829956055, 0.3472170829772949, 0.2678990364074707, 0.25884509086608887, 0.3108711242675781, 0.29883790016174316, 0.37784814834594727, 0.2595820426940918, 0.25365614891052246, 0.42064595222473145, 0.28043389320373535, 0.25406599044799805, 0.3732490539550781, 0.25599002838134766, 0.25986576080322266, 0.34205198287963867, 0.25286412239074707, 0.25263524055480957, 0.3652839660644531, 0.27959418296813965, 0.37421178817749023, 0.26067209243774414, 0.2546348571777344, 0.41648197174072266, 0.2604978084564209, 0.2452530860900879, 0.33561182022094727, 0.26496219635009766, 0.2646620273590088, 0.3706929683685303, 0.2672410011291504, 0.276583194732666, 0.34249091148376465, 0.2575843334197998, 0.38164186477661133, 0.3269367218017578, 0.2689239978790283, 0.3910481929779053, 0.26518797874450684, 0.2554800510406494, 0.39517903327941895, 0.2592291831970215, 0.25387024879455566, 0.3104708194732666, 0.2669498920440674, 0.4318881034851074, 0.25853991508483887, 0.2745814323425293, 0.3960540294647217, 0.2515268325805664, 0.28801798820495605, 0.3749399185180664, 0.2560920715332031, 0.29387497901916504, 0.29541611671447754, 0.25196123123168945, 0.26076388359069824, 0.31488704681396484, 0.33486223220825195, 0.4189488887786865, 0.27716517448425293, 0.25839996337890625, 0.43024301528930664, 0.28235888481140137, 0.25916504859924316, 0.3388829231262207, 0.2608809471130371, 0.4170529842376709, 0.3027932643890381, 0.2995331287384033, 0.5538880825042725, 0.2868032455444336, 0.4710581302642822, 0.277512788772583, 0.26375913619995117, 0.38222384452819824, 0.2979600429534912, 0.2811877727508545, 0.28911900520324707, 0.3022000789642334, 0.44292306900024414, 0.2616391181945801, 0.28952813148498535, 0.38356518745422363, 0.25185108184814453, 0.2540907859802246, 0.3873898983001709]

		for i in range(1000):
			req_start = time.time()
			asyncio.run(TestServer.async_download(['http://localhost:8080/vehicles_positions&preventCache=' + str(random()) for _ in range(100)]))
			req_end = time.time()
			# self.assertLess(req_end - req_start, 1)
			times.append(req_end - req_start)
			sleep(0.1)
		# print(times)

		plt.hist(times, 30, density=False)
		plt.xlabel('Čas čekání na odpověď [s]')
		plt.ylabel('Počet 100dotazových shluků zodpovězených za daný čas')
		plt.savefig('server_response_time.pdf')
		plt.show()


	## skipp this test,
	## due to the test database contains old data the server does not find any trip
	## because it finds trips not older 10 minutes
	# def test_get_vehicles_positions(self):
	# 	server = Server('vehicle_positions_test_database')
	#
	# 	all_veh = server.get_vehicles_positions()
	#
	# 	self.assertIsInstance(all_veh, dict)
	# 	self.assertEqual(149, len(all_veh['features']))
	# 	self.assertEqual('Benice', all_veh['features'][0]['properties']['headsign'])

# if __name__ == '__main__':
# 	unittest.main()
